// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Mux16(a=instruction, b=ofalu, sel=instruction[15], out= ofm1);
	Not(in=instruction[15], out=n15);
	Or(a=n15, b=instruction[5], out=A); 
	ARegister(in=ofm1, load=A, out=ofar, out[0..14]=addressM);
	And(a=instruction[15], b=instruction[4], out=D);
	DRegister(in=ofalu, load=D, out=ofdr);
	Mux16(a=ofar, b=inM, sel=instruction[12], out=ofm2);
	ALU(x=ofdr, y=ofm2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ofalu, out=outM, zr=ofalu1, ng=ofalu2);
 	And(a=instruction[15], b=instruction[3], out=writeM);
	Or(a=ofalu1, b=ofalu2, out=oor);
  	Not(in=oor, out=nor);
	And(a=instruction[0], b=nor,  out=j1);
  	And(a=instruction[1], b=ofalu1, out=j2);
 	And(a=instruction[2], b=ofalu2,  out=j3);
	Or(a=j1, b=j2, out=or);
  	Or(a=or, b=j3, out=jmp);
	And(a=instruction[15], b=jmp, out=pcl);
	PC(in=ofar, load=pcl, inc=true, reset=reset, out[0..14]=pc);
}