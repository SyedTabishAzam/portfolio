// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * Memory operations library.
 */ 
class Memory {
	static Array freeList;
    /** Initializes memory parameters. */
    function void init() {
	let freeList = 2048;
	let freeList[0]=-1;
	let freeList[1]=14335;
	return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
	var Array memory;
	let memory = 0;
	if (address>0){
		return memory[address];
	}
	else{
		do Sys.error(2);
	}
	return -1;
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
    var Array memory;
	let memory = 0;
	if (address>0){
		let memory[address] = value;
	}
	else{
		do Sys.error(2);
	}
	return;
	}

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
	var Array segment, b, back, oldbest;
	var int segsize, bsize, flag;
	let back=freeList;
	let segment=freeList;
	let bsize=16384-2048-1;
	let flag=0;
	while(~(segment=-1)){
		if(~((segment[1]<size)|(segment[1]>bsize))){
			let oldbest=back;
			let bsize=segment[1];
			let b=segment;
			let flag=1;
		}
		let back=segment;
		let segment=segment[0];
	}
	if(flag=1){
		let segment=b+size+1;
		if(bsize=size){
			let segment=b[0];
		}
		if(~(b=freeList)){
			let oldbest[0]=segment;
		}
		if(~(bsize=size)){
			let segment[0]=b[0];
			let segment[1]=segment[0]-(segment+1);
			if(segment[0]=-1){
				let segment[1]=16384-(segment+1);
			}
		}
		if(b=freeList){
			let freeList=segment;
		}	
		let b[0]=size;
		return (b+1);
	}
	do Sys.error(1);
	return -1;
    }

	

    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
	var Array segment;
	let segment = object - 1;
	let segment[1]=object[-1];
	let segment[0]=freeList;
	let freeList = segment;
	return;
	
    }    
}
