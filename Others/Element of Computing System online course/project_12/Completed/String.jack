// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	field Array str;
	field int ml;
	field int ln;
    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
	if (maxLength>0){
		let str = Array.new(maxLength);
	}
	let ml = maxLength;
	return this;
    }

    /** De-allocates the string and frees its space. */
    method void dispose() {
	while (ml>0){
		let str[ml] = 0;
		let ml = ml - 1;
	}
	return;
    }

    /** Returns the current length of this String. */
    method int length() {
	return ln;
    }

    /** Returns the character at location j. */
    method char charAt(int j) {
	if (j>-1){
		if (j<ln){
			return str[j];
		}
	}
	
	return Sys.error(2); 
    }

    /** Sets the j'th character of this string to be c. */
    method void setCharAt(int j, char c) {
	if (j>-1){
		if (j<ln){
			let str[j] = c;
			return;
		}
	}
	do Sys.error(3);
	return;
    }

    /** Appends the character c to the end of this String.
     *  Returns this string as the return value. */
    method String appendChar(char c) {
	if (ln<ml){
		let str[ln]=c;
		let ln = ln + 1;
	}
	return this;
    }

    /** Erases the last character from this String. */
    method void eraseLastChar() {
		let str[ln]=0;
		let ln = ln - 1;
		
		return;
    }

    /** Returns the integer value of this String until the first non
     *  numeric character. */
    method int intValue() {
	var int i,v,d;
	var boolean neg;
	
	let i = 0;
	if (str[i]=45){
		let neg = true;
		let i = i + 1;
	}
	
	while (i<ln){
		
		let v = v * 10 + str[i]-48;
		let i = i + 1;
	}	
		if (neg){
			return -v;
		}
	
	return v;
    }

    /** Sets this String to hold a representation of the given number. */
    method void setInt(int number) {
	if (number<0){
		let ml=1;
		let ln=0;
		do appendChar(45);
		do setInt(-(number/10));
		let ml = ml + 1;
		do appendChar(-(number-((number/10)*10))+48);
		return;
	}
	if(number<10){
		if(~((ml=1)&(str[0]=45))){
			let ml=0;
			let ln=0;
		}
		let ml=ml+1;
		do appendChar(number+48);
	}
	else{
		do setInt(number/10);
		let ml=ml+1;
		do appendChar(number-((number/10)*10)+48);
	}
	return;
    }

    /** Returns the new line character. */
    function char newLine() {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
	return 34;
    }
}
